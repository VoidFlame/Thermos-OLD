--- eclipse/Clean/src/main/java/net/minecraftforge/oredict/OreDictionary.java	2019-01-11 20:13:52.751817900 -0500
+++ eclipse/Cauldron/src/main/java/net/minecraftforge/oredict/OreDictionary.java	2019-01-12 11:18:35.279425500 -0500
@@ -1,21 +1,11 @@
 package net.minecraftforge.oredict;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.ListIterator;
-import java.util.Map;
-import java.util.RandomAccess;
-import java.util.Map.Entry;
-import java.util.Set;
-
-import org.apache.logging.log4j.Level;
-
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import cpw.mods.fml.common.FMLLog;
+import cpw.mods.fml.common.Loader;
+import cpw.mods.fml.common.eventhandler.Event;
+import cpw.mods.fml.common.registry.GameData;
 import net.minecraft.block.Block;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
@@ -26,14 +16,9 @@
 import net.minecraft.item.crafting.ShapedRecipes;
 import net.minecraft.item.crafting.ShapelessRecipes;
 import net.minecraftforge.common.MinecraftForge;
+import org.apache.logging.log4j.Level;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-
-import cpw.mods.fml.common.FMLLog;
-import cpw.mods.fml.common.Loader;
-import cpw.mods.fml.common.eventhandler.Event;
-import cpw.mods.fml.common.registry.GameData;
+import java.util.*;
 
 public class OreDictionary
 {
@@ -60,77 +45,77 @@
     {
         if (!hasInit)
         {
-            registerOre("logWood",     new ItemStack(Blocks.log, 1, WILDCARD_VALUE));
-            registerOre("logWood",     new ItemStack(Blocks.log2, 1, WILDCARD_VALUE));
-            registerOre("plankWood",   new ItemStack(Blocks.planks, 1, WILDCARD_VALUE));
-            registerOre("slabWood",    new ItemStack(Blocks.wooden_slab, 1, WILDCARD_VALUE));
-            registerOre("stairWood",   Blocks.oak_stairs);
-            registerOre("stairWood",   Blocks.spruce_stairs);
-            registerOre("stairWood",   Blocks.birch_stairs);
-            registerOre("stairWood",   Blocks.jungle_stairs);
-            registerOre("stairWood",   Blocks.acacia_stairs);
-            registerOre("stairWood",   Blocks.dark_oak_stairs);
-            registerOre("stickWood",   Items.stick);
-            registerOre("treeSapling", new ItemStack(Blocks.sapling, 1, WILDCARD_VALUE));
-            registerOre("treeLeaves",  new ItemStack(Blocks.leaves, 1, WILDCARD_VALUE));
-            registerOre("treeLeaves",  new ItemStack(Blocks.leaves2, 1, WILDCARD_VALUE));
-            registerOre("oreGold",     Blocks.gold_ore);
-            registerOre("oreIron",     Blocks.iron_ore);
-            registerOre("oreLapis",    Blocks.lapis_ore);
-            registerOre("oreDiamond",  Blocks.diamond_ore);
-            registerOre("oreRedstone", Blocks.redstone_ore);
-            registerOre("oreEmerald",  Blocks.emerald_ore);
-            registerOre("oreQuartz",   Blocks.quartz_ore);
-            registerOre("oreCoal",     Blocks.coal_ore);
-            registerOre("blockGold",     Blocks.gold_block);
-            registerOre("blockIron",     Blocks.iron_block);
-            registerOre("blockLapis",    Blocks.lapis_block);
-            registerOre("blockDiamond",  Blocks.diamond_block);
-            registerOre("blockRedstone", Blocks.redstone_block);
-            registerOre("blockEmerald",  Blocks.emerald_block);
-            registerOre("blockQuartz",   Blocks.quartz_block);
-            registerOre("blockCoal",     Blocks.coal_block);
-            registerOre("blockGlassColorless", Blocks.glass);
-            registerOre("blockGlass",    Blocks.glass);
-            registerOre("blockGlass",    new ItemStack(Blocks.stained_glass, 1, WILDCARD_VALUE));
+            registerVanillaOre("logWood",     new ItemStack(Blocks.log, 1, WILDCARD_VALUE));
+            registerVanillaOre("logWood",     new ItemStack(Blocks.log2, 1, WILDCARD_VALUE));
+            registerVanillaOre("plankWood",   new ItemStack(Blocks.planks, 1, WILDCARD_VALUE));
+            registerVanillaOre("slabWood",    new ItemStack(Blocks.wooden_slab, 1, WILDCARD_VALUE));
+            registerVanillaOre("stairWood",   Blocks.oak_stairs);
+            registerVanillaOre("stairWood",   Blocks.spruce_stairs);
+            registerVanillaOre("stairWood",   Blocks.birch_stairs);
+            registerVanillaOre("stairWood",   Blocks.jungle_stairs);
+            registerVanillaOre("stairWood",   Blocks.acacia_stairs);
+            registerVanillaOre("stairWood",   Blocks.dark_oak_stairs);
+            registerVanillaOre("stickWood",   Items.stick);
+            registerVanillaOre("treeSapling", new ItemStack(Blocks.sapling, 1, WILDCARD_VALUE));
+            registerVanillaOre("treeLeaves",  new ItemStack(Blocks.leaves, 1, WILDCARD_VALUE));
+            registerVanillaOre("treeLeaves",  new ItemStack(Blocks.leaves2, 1, WILDCARD_VALUE));
+            registerVanillaOre("oreGold",     Blocks.gold_ore);
+            registerVanillaOre("oreIron",     Blocks.iron_ore);
+            registerVanillaOre("oreLapis",    Blocks.lapis_ore);
+            registerVanillaOre("oreDiamond",  Blocks.diamond_ore);
+            registerVanillaOre("oreRedstone", Blocks.redstone_ore);
+            registerVanillaOre("oreEmerald",  Blocks.emerald_ore);
+            registerVanillaOre("oreQuartz",   Blocks.quartz_ore);
+            registerVanillaOre("oreCoal",     Blocks.coal_ore);
+            registerVanillaOre("blockGold",     Blocks.gold_block);
+            registerVanillaOre("blockIron",     Blocks.iron_block);
+            registerVanillaOre("blockLapis",    Blocks.lapis_block);
+            registerVanillaOre("blockDiamond",  Blocks.diamond_block);
+            registerVanillaOre("blockRedstone", Blocks.redstone_block);
+            registerVanillaOre("blockEmerald",  Blocks.emerald_block);
+            registerVanillaOre("blockQuartz",   Blocks.quartz_block);
+            registerVanillaOre("blockCoal",     Blocks.coal_block);
+            registerVanillaOre("blockGlassColorless", Blocks.glass);
+            registerVanillaOre("blockGlass",    Blocks.glass);
+            registerVanillaOre("blockGlass",    new ItemStack(Blocks.stained_glass, 1, WILDCARD_VALUE));
             //blockGlass{Color} is added below with dyes
-            registerOre("paneGlassColorless", Blocks.glass_pane);
-            registerOre("paneGlass",     Blocks.glass_pane);
-            registerOre("paneGlass",     new ItemStack(Blocks.stained_glass_pane, 1, WILDCARD_VALUE));
+            registerVanillaOre("paneGlassColorless", Blocks.glass_pane);
+            registerVanillaOre("paneGlass",     Blocks.glass_pane);
+            registerVanillaOre("paneGlass",     new ItemStack(Blocks.stained_glass_pane, 1, WILDCARD_VALUE));
             //paneGlass{Color} is added below with dyes
-            registerOre("ingotIron",     Items.iron_ingot);
-            registerOre("ingotGold",     Items.gold_ingot);
-            registerOre("ingotBrick",    Items.brick);
-            registerOre("ingotBrickNether", Items.netherbrick);
-            registerOre("nuggetGold",  Items.gold_nugget);
-            registerOre("gemDiamond",  Items.diamond);
-            registerOre("gemEmerald",  Items.emerald);
-            registerOre("gemQuartz",   Items.quartz);
-            registerOre("dustRedstone",  Items.redstone);
-            registerOre("dustGlowstone", Items.glowstone_dust);
-            registerOre("gemLapis",    new ItemStack(Items.dye, 1, 4));
-            registerOre("slimeball",   Items.slime_ball);
-            registerOre("glowstone",   Blocks.glowstone);
-            registerOre("cropWheat",   Items.wheat);
-            registerOre("cropPotato",  Items.potato);
-            registerOre("cropCarrot",  Items.carrot);
-            registerOre("stone",       Blocks.stone);
-            registerOre("cobblestone", Blocks.cobblestone);
-            registerOre("sandstone",   new ItemStack(Blocks.sandstone, 1, WILDCARD_VALUE));
-            registerOre("sand",        new ItemStack(Blocks.sand, 1, WILDCARD_VALUE));
-            registerOre("dye",         new ItemStack(Items.dye, 1, WILDCARD_VALUE));
-            registerOre("record",      Items.record_13);
-            registerOre("record",      Items.record_cat);
-            registerOre("record",      Items.record_blocks);
-            registerOre("record",      Items.record_chirp);
-            registerOre("record",      Items.record_far);
-            registerOre("record",      Items.record_mall);
-            registerOre("record",      Items.record_mellohi);
-            registerOre("record",      Items.record_stal);
-            registerOre("record",      Items.record_strad);
-            registerOre("record",      Items.record_ward);
-            registerOre("record",      Items.record_11);
-            registerOre("record",      Items.record_wait);
+            registerVanillaOre("ingotIron",     Items.iron_ingot);
+            registerVanillaOre("ingotGold",     Items.gold_ingot);
+            registerVanillaOre("ingotBrick",    Items.brick);
+            registerVanillaOre("ingotBrickNether", Items.netherbrick);
+            registerVanillaOre("nuggetGold",  Items.gold_nugget);
+            registerVanillaOre("gemDiamond",  Items.diamond);
+            registerVanillaOre("gemEmerald",  Items.emerald);
+            registerVanillaOre("gemQuartz",   Items.quartz);
+            registerVanillaOre("dustRedstone",  Items.redstone);
+            registerVanillaOre("dustGlowstone", Items.glowstone_dust);
+            registerVanillaOre("gemLapis",    new ItemStack(Items.dye, 1, 4));
+            registerVanillaOre("slimeball",   Items.slime_ball);
+            registerVanillaOre("glowstone",   Blocks.glowstone);
+            registerVanillaOre("cropWheat",   Items.wheat);
+            registerVanillaOre("cropPotato",  Items.potato);
+            registerVanillaOre("cropCarrot",  Items.carrot);
+            registerVanillaOre("stone",       Blocks.stone);
+            registerVanillaOre("cobblestone", Blocks.cobblestone);
+            registerVanillaOre("sandstone",   new ItemStack(Blocks.sandstone, 1, WILDCARD_VALUE));
+            registerVanillaOre("sand",        new ItemStack(Blocks.sand, 1, WILDCARD_VALUE));
+            registerVanillaOre("dye",         new ItemStack(Items.dye, 1, WILDCARD_VALUE));
+            registerVanillaOre("record",      Items.record_13);
+            registerVanillaOre("record",      Items.record_cat);
+            registerVanillaOre("record",      Items.record_blocks);
+            registerVanillaOre("record",      Items.record_chirp);
+            registerVanillaOre("record",      Items.record_far);
+            registerVanillaOre("record",      Items.record_mall);
+            registerVanillaOre("record",      Items.record_mellohi);
+            registerVanillaOre("record",      Items.record_stal);
+            registerVanillaOre("record",      Items.record_strad);
+            registerVanillaOre("record",      Items.record_ward);
+            registerVanillaOre("record",      Items.record_11);
+            registerVanillaOre("record",      Items.record_wait);
         }
 
         // Build our list of items to replace with ore tags
@@ -180,9 +165,9 @@
             ItemStack pane = new ItemStack(Blocks.stained_glass_pane, 1, 15 - i);
             if (!hasInit)
             {
-                registerOre("dye" + dyes[i], dye);
-                registerOre("blockGlass" + dyes[i], block);
-                registerOre("paneGlass"  + dyes[i], pane);
+                registerVanillaOre("dye" + dyes[i], dye);
+                registerVanillaOre("blockGlass" + dyes[i], block);
+                registerVanillaOre("paneGlass"  + dyes[i], pane);
             }
             replacements.put(dye,   "dye" + dyes[i]);
             replacements.put(block, "blockGlass" + dyes[i]);
@@ -221,7 +206,7 @@
             {
                 ShapedRecipes recipe = (ShapedRecipes)obj;
                 ItemStack output = recipe.getRecipeOutput();
-                if (output != null && containsMatch(false, exclusions, output))
+                if ((output != null && containsMatch(false, exclusions, output)) || output == null) // Cauldron - fixes NPE's with null recipes being added to forge
                 {
                     continue;
                 }
@@ -236,7 +221,7 @@
             {
                 ShapelessRecipes recipe = (ShapelessRecipes)obj;
                 ItemStack output = recipe.getRecipeOutput();
-                if (output != null && containsMatch(false, exclusions, output))
+                if ((output != null && containsMatch(false, exclusions, output)) || output == null) // Cauldron - fixes NPE's with null recipes being added to forge
                 {
                     continue;
                 }
@@ -335,7 +320,6 @@
     {
         if (stack == null || stack.getItem() == null) return new int[0];
 
-        Set<Integer> set = new HashSet<Integer>();
 
         // HACK: use the registry name's ID. It is unique and it knows about substitutions. Fallback to a -1 value (what Item.getIDForItem would have returned) in the case where the registry is not aware of the item yet
         // IT should be noted that -1 will fail the gate further down, if an entry already exists with value -1 for this name. This is what is broken and being warned about.
@@ -351,15 +335,24 @@
         {
             id = GameData.getItemRegistry().getId(registryName);
         }
+
+        Set<Integer> set;
+        int count = 0;
         List<Integer> ids = stackToId.get(id);
-        if (ids != null) set.addAll(ids);
-        ids = stackToId.get(id | ((stack.getItemDamage() + 1) << 16));
-        if (ids != null) set.addAll(ids);
-
-        Integer[] tmp = set.toArray(new Integer[set.size()]);
-        int[] ret = new int[tmp.length];
-        for (int x = 0; x < tmp.length; x++)
-            ret[x] = tmp[x];
+        if (ids != null) count += ids.size();
+        List<Integer> ids2 = stackToId.get(id | ((stack.getItemDamage() + 1) << 16));
+        if (ids2 != null) count += ids2.size();
+        set = new HashSet<Integer>(count);
+
+        boolean fal = ids != null ? set.addAll(ids): false;
+        fal = ids2 != null ? set.addAll(ids2) : false;
+
+        int[] ret = new int[count];
+        count = 0;
+        for(Iterator<Integer> it = set.iterator(); it.hasNext();)
+        {
+            ret[count++] = it.next();
+        }
         return ret;
     }
 
@@ -492,29 +485,33 @@
         {
             return false;
         }
+        System.out.println();
         return (target.getItem() == input.getItem() && ((target.getItemDamage() == WILDCARD_VALUE && !strict) || target.getItemDamage() == input.getItemDamage()));
     }
-
     //Convenience functions that make for cleaner code mod side. They all drill down to registerOre(String, int, ItemStack)
-    public static void registerOre(String name, Item      ore){ registerOre(name, new ItemStack(ore));  }
-    public static void registerOre(String name, Block     ore){ registerOre(name, new ItemStack(ore));  }
-    public static void registerOre(String name, ItemStack ore){ registerOreImpl(name, ore);             }
+    public static void registerVanillaOre(String name, Item      ore){ registerVanillaOre(name, new ItemStack(ore));  }
+    public static void registerVanillaOre(String name, Block     ore){ registerVanillaOre(name, new ItemStack(ore));  }
+    public static void registerVanillaOre(String name, ItemStack ore){ registerOreImpl(name, ore, true);              }
+    
+    public static void registerOre(String name, Item      ore){ registerOre(name, new ItemStack(ore));         }
+    public static void registerOre(String name, Block     ore){ registerOre(name, new ItemStack(ore));         }
+    public static void registerOre(String name, ItemStack ore){ registerOreImpl(name, ore, false);             }
     @Deprecated //Use named, not ID in 1.8+
-    public static void registerOre(int    id,   Item      ore){ registerOre(id,   new ItemStack(ore));  }
+    public static void registerOre(int    id,   Item      ore){ registerOre(id,   new ItemStack(ore));         }
     @Deprecated //Use named, not ID in 1.8+
-    public static void registerOre(int    id,   Block     ore){ registerOre(id,   new ItemStack(ore));  }
+    public static void registerOre(int    id,   Block     ore){ registerOre(id,   new ItemStack(ore));         }
     @Deprecated //Use named, not ID in 1.8+
-    public static void registerOre(int    id,   ItemStack ore){ registerOreImpl(getOreName(id), ore);   }
+    public static void registerOre(int    id,   ItemStack ore){ registerOreImpl(getOreName(id), ore, false);   }
 
     /**
      * Registers a ore item into the dictionary.
      * Raises the registerOre function in all registered handlers.
      *
      * @param name The name of the ore
-     * @param id The ID of the ore
+     * @param ore The ItemStack of the ore
      * @param ore The ore's ItemStack
      */
-    private static void registerOreImpl(String name, ItemStack ore)
+    private static void registerOreImpl(String name, ItemStack ore, boolean vanilla)
     {
         if (name == null || name.isEmpty() || "Unknown".equals(name)) return; //prevent bad IDs.
         if (ore == null || ore.getItem() == null)
@@ -522,6 +519,11 @@
             FMLLog.bigWarning("Invalid registration attempt for an Ore Dictionary item with name %s has occurred. The registration has been denied to prevent crashes. The mod responsible for the registration needs to correct this.", name);
             return; //prevent bad ItemStacks.
         }
+        
+        if(vanilla) 
+        {
+//            ore.setVanilla(true);
+        }
 
         int oreID = getOreID(name);
         // HACK: use the registry name's ID. It is unique and it knows about substitutions. Fallback to a -1 value (what Item.getIDForItem would have returned) in the case where the registry is not aware of the item yet
@@ -684,4 +686,4 @@
             };
         }
     }
-}
\ No newline at end of file
+}
